		28강
 메인앱
 메인앱
<table-component></>

 TableComponent
<table><tr-component></></>

 TrComponent
<tr><td-component></></>

 TdComponent
<td>데이터</>

이렇게 계층을 가지도록 만들었다. 이렇게 만드는이유는
만약 테이블을
<table> 
	<tr>
		<td></td>
		<td></td>
	</tr>
</table>
이렇게 만든다할때 td에 값이 변경된다면 table전체가 다시 렌더링되어야 한다.
성능상으로 많은 문제가 발생한다. 우리가 원하는것은
하나의 td가 변경된다면 하나의 칸만 렌더링되는 것을 원한다.

 기억하자 
props를 넘길때
:tableData="tableData" 이렇게 넘기지말고
:table-data="tableData" 이렇게 넘기자

props: { tableData: ...} 
둘다 똑같이 이렇게 받을 수 있다.

이렇게 계층을 만들었으면 자식까지 필요한 데이터를 적절하게 계속 넘겨주어야한다.
 tr예시 
<tr-component 
            v-for="(rowData, index) in tableData" 
            :key="index" :row-data="rowData" :row-index="index">
</tr-component>

 td예시
<td-component 
            v-for="(cellData, index) in rowData" 
            :key="index" :cell-data="cellData" 
            :cell-index="index" :row-index="rowIndex">
</td-component>



		29강
App -> TableComponent -> TrComponent -> TdComponent
이전 강의시간에 위와 같은 구조의 계층구성을 해봤다

그럼 이렇게 넘겨주는 계층이 
10계층 100계층 이렇게 된다면
다 넘길 수 있을까?

이런문제로 Vuex가 있으나 그 이전에 vue에서 제공하는게 있다.
App -> TableComponent -> TrComponent -> TdComponent
이러한 계층구성에서 TdComponent에서
this.$root.$data 이 코드를 사용하면 App에 Data를 사용할 수 있다.

만약 TdComponent의 부모인 TrComponent에 데이터를 보고싶다면
this.$parent.$data 이 코드를 사용하면 볼 수 있다.

App에
... data() { turn: 'O' }, ... 이렇게 설정이 되어있으면
TdComponent에서
this.$root.$data.turn == this.$root.$data.turn === 'O' ? 'X' : 'O';
이런 코드를 이용하여 데이터를 조작할 수 있다.


		30~31강

 		뷰에서 정말 중요한 내용
App -> TableComponent -> TrComponent -> TdComponent
이러한 계층구성에서 TdComponent에서 
this.$root.$data.tableData[this.rowIndex][this.cellIndex] = this.$root.$data.turn;
this.$root.$data.turn = this.$root.$data.turn === 'O' ? 'X' : 'O';
이런식으로 데이터를 변경하는데 tableData 즉 테이블 화면이 변경되지 않고 있다.

그럼 root인 App에서 
onChange() { this.tableData[0][1] = 'O'; }
이런 메소드를 만들고 사용하면 바뀔까?
	!!!!!!!!!!안된다!!!!!!!!!!!!
배열을 만들고 인덱스를 이용하여 값을 변경하면 화면에 표시되지 않는다.
this.turn = 'X'; 이런식으로 바꾸는 것은 화면에 반영이되지만
!!!!!!!!!! 객체나 배열의 경우 !!!!!!!!!!
tableData[0][1] = 'O'; 이렇게 인덱스를 가지고 바꾸는것은 안된다.
자바스크립트의 한계때문에 Vue에서 어쩔수 없이 이런 현상이 나타난다.
 하지만
this.tableData.push('O'); 이런식으로 메소드를 이용해서 값을 변경하는 것은 반영이 된다.

 이런현상의 해결방법은 2가지가 있다.
1. this.tableData[0][1] = 'O'; 코드를
import Vue from 'vue'; 를해서
Vue.set( this.tableData[0], 1, 'O'); //Vue.set(오브젝트, 키값, 넣을값) 
값을 변경할 위치가 [2][3]일때는 Vue.set( this.tableData[2], 3, 'O');
이렇게 값을 넣어주는 것이다
Vue.set을 사용하여 값을 바꾸면서 렌더링을해준다.

2. 귀찮게 import Vue from 'vue';를 하지말고
this.$set( this.tableData[0], 1, 'O'); //Vue.set과 동일하다.


this.$root.$data.tableData[this.rowIndex][this.cellIndex] = this.$root.$data.turn; 
인덱스로 접근하는 이 코드를
this.$set(this.$root.$data.tableData[this.rowIndex], this.cellIndex, this.$root.$data.turn);
이렇게 바꿔준다는 것이다.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!이거 Vue에서 엄청 많이 하는 실수다. 진짜 꼭 기억하자!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Vuex를 안쓰고 $parent, $root를 쓰다보면
$parent.$parent.$data 
이렇게 할아버지의 데이터를본다거나 그런경우가 있다.
근데 100개중 할아버지가 무엇인지 알기 힘들다. 그렇게 코드가 애매해질 때
Vuex를 쓰는것이다. 
Vuex는 중앙통제실에서 데이터를 관리하는 형식이다.
중앙에 데이터들을 몰아넣고 거기서 뽑아쓰는 형식이라 코드의 가독성이 좋다

vue개발자 확장프로그램에서
updateRender라는 것이 있는데 이것이 뭔가 비정상적으로 막 올라간다면
내가 업데이트하려는 것 이외에 것도 다시 렌더링하는 것이니 성능향상을 위해 고쳐주자.




		32강

Vuex를 배우기전에 EventBus에 대해 잠깐 배워보자
Vuex는 데이터를 중앙에서 통제하지만
EventBus는 이벤트를 중앙에서 통제한다.(이벤트 중앙 매개체)

EventBus.js라는 파일을 만들고 아래코드를 입력한다.
import Vue from 'vue';
export default new Vue();
이 내용을 담고 있는 빈 깡통 js파일을 만든것이다.

 루트앱
import EventBus from 'EventBus' 추가
export default new Vue ({
...
	methods: { clickEv() { alert('이벤트발생!'); },
	created() { EventBus.$on('clickEv', this.onClickEv); }, //
)}

 자식 컴포넌트
import EventBus from 'EventBus' 추가
export default new Vue ({
...
	methods: { clickEvent() { EventBus.$emit('clickEv'); },
)}
이렇게 사용할 수 있다.
단점은 이벤트를 하나하나 다 중앙에서 붙혀주어야 한다는 것

만약 값을 넘겨주어야한다면
 루트앱
...
methods: { test(n1, n2) { return n1+n2; }}
...

 자식컴포넌트
...EventBus.$emit('test', this.n1, this.n2); ...
이렇게 사용할 수 있다.

정리하자면 EventBus는
빈 깡통 js를 만들고.
그곳에 EventBus.$on( ... ) 이렇게 이벤트함수를 등록하고
자식 컴포넌트에서 Event.$emit( ... ) 이벤트함수를 불러내는 것이다.
이벤트버스도 생각보다는 많이 사용하니까 알아두자.



		33강

이번에는 Vuex를 사용해 보자
1. npm i vuex
2. Vuex는 store.js를 만든다
	Vuex는 store.js를 여러개 만들 수 있다.
3. store.js 내용
import Vuex from 'vuex';
export default new Vuex.Store({
    state: {
        
    }, //Vue에 data와 비슷
    getters: {

    },//Vue의 computed와 비슷 
    //완전히 같은게 아니라 비슷하다는 것 명심
    mutations: {

    }, //state를 동기적으로 수정할 때 사용
    //state를 바꿀때 바로 바꾸지말고 mutations를 통해 바꾸길 권장
    actions: {

    }, // 비동기를 사용할 때, 또는 여러 뮤테이션을 연달아 실행할 때
});

	34강
data는 그냥 state로 이동시키면된다.
state: {
        tableData: [
            ['', '', ''],
            ['', '', ''],
            ['', '', ''],
        ],
        turn: 'O',
        winner: '',
},
mutations: {
        SET_WINNER(state, winner) {
            state.winner = winner;
        }
},

mutaions에 메소드는 대문자가 원칙이다.
const SET_WINNER = 'SET_WINNER';
...
mutations: {
        [SET_WINNER](state, winner) {
            state.winner = winner;
        }
},
...
이렇게 메소드명을 변수로 바꿀 수 있다.
이건 es2015문법인데 Vue에서는 보통 이렇게 많이 한다.


export const SET_WINNER = 'SET_WINNER';
저렇게 선언한 함수이름에 export를 붙혀서 모듈로 사용한다.

Vuex에서는 this.$set(...)이 없기 떄문에 Vue.set(...)이렇게 사용한다.
이걸 사용하려면 vue를 불러와야겠지? import Vue from 'vue';

이제 store를 사용하려면
this.$store.commit('SET_WINNER');  이렇게 실행하면 된다.

그러나 SET_WINNER가 오타날 여지가 많다
그래서 export를 해준것이다.
import { SET_WINNER } from '.store';
this.$store.commit(SET_WINNER);
이렇게 사용하면 된다.

export default와
export의 차이
export default는 import store from './store'; 이렇게 마음대로 이름을 붙혀서 가져올 수 있으나
export는 import { SET_WINNER } from './store' 이렇게 고정된 이름으로 가져온다.
중괄호로 묶어야하고 이름이 일치해야 한다.

import { SET_WINNER, CHANGE_GAME, ... } from './store'
이렇게 여러개를 가져올 수 있다.

보통 export default는 하나의 파일에서 가장 중요한 한개만 한다.

[CLICK_CELL](state, {row, cell}) {
            state.winner = winner;
}
만약 CLICK_CELL이 이렇게 되어있다면
this.$store.commit(CLICK_CELL, { row: this.rowIndex, cell: this.cellIndex });
이렇게 인수를 넣는것을 까먹지말자.




		35강
이전시간에
this.$root를 사용할때는
const rootData = this.$root.$data;
이러한 코드를 사용해서 root 컴포넌트 데이터에 접근을 했다.
이제 Vuex를 사용하니까 이 코드를 삭제하자
rootData.tableDate ... 이렇게 되어있는것을 
tableData... 이렇게 rootData를 지워버리고

computed: {
            tableData() {
                return this.$store.state.tableData;
            }
},
이렇게 Vuex에서 가져오도록 만들자.

 주의!
현재상황에서는 에러가난다.
Vue와 Vuex를 연결해주어야한다.
Vue와 Vuex연결, Vuex와 최상위컴포넌트(root) 연결.
1. store.js로 이동.
2. 코드 상단에 Vue.use(Vuex); 코드 입력.
	반드시 export default new Vuex.Store({...}) 코드보다 앞에 입력해서 연결해야 한다.
3. 최상위 컴포넌트로 이동.
4. import store from './store'; 코드 입력
5. export default에 store 입력해줌
export default { 
	store,
	components{..},
	...
}

그러면 이제 this.$store 를 쓸 수 있다.

예를 들어 너가 tableData변수를 부모에서 가져오는게 아니라  store에서 직접 가져다가 쓰려면
export default { 
	computed: { tableData() { return this.$store.state.tableData; } }
	methods: { useTableData() { data = this.tableData + 100;  } }
	...
}
이런식으로 computed에 등록해서 사용할 수 있다.



		36강

이전강의에서 computed에 등록하는 것을 배웠다.
그런데 100개의 변수를 사용한다면 어떨까?
computed: { data1() {...}, data2() {...}, .... },
이렇게 일일이 적어주어야한다.

이럴때 사용하는 것이  mapState이다.
import { mapState } from 'vuex';
....
computed: { ...mapState(['data1', 'data2', (나머지 다 적어줌) ]) }
//여기 mapState앞에 ...은 생략의 의미가 아닌 진짜 적어야하는 코드이다.
...
이렇게 mapState를 사용할 수 있다.

...mapState({
	winner(state) { return state.winner + this.data; },
	turnState: 'turn',
	table: state => state.table;
}) 
이런식으로도 사용가능하다. 이름을 꼭 같게 할 필요가 없다.
공식문서를 참조하자.

이전에 Vuex에 getter는 computed와 같다고 말했다.
getters: {
	turnMessage() { return state.turn + '님이 승리했습니다.'; }
}
이렇게 store에 쓰고
컴포넌트에서는
computed: { turnMessage() { return this.$store.getters.turnMessage; } }
getter를 사용하여 가져오면 된다.
이렇게 쓰는 이유는 캐싱되고 state.turn이 바뀔때만 turnMessage가 바뀌기 때문에 쓴다.

Vuex 공식문서를 참고하면 도움이 많이 될것이다. 자세한 설명은 생략.

Vue.use(Vuex);
import store from 'store';
위 코드를 위치에 맞게 설정하는것을 잊지말아라

Vue.use(Vuex); 를하면 this.$store 가 생긴다.
만약 Vue.use(axios)를 하면 this.$axios를 사용할 수 있다.

 main.js코드
import Vue from 'vue';
import TikTacTo from './TikTacTo';
Vue.use(Vuex);
new Vue(TikTacTo).$mount("#root"); 
이렇게 main.js에 Vue.use를 하면 편하지 않을까?에 대답 X. 안된다.
import는 항상 최상단에 있어야한다. 
그래서 TikTacTo에 들어가보면 
import store from './store'; 이 코드가 있어서 이상해진다.




		37강

씨발오류
내용은 별거없다.
그냥 여러 컴포넌트로 만든걸 하나에 컴포넌트에 만드는걸로 바꿨다
<table><tr><td></></></>
근데 내가 합치는 과정에서 뭔갈 잘못했는지 오류가 난다




		38강

slot(슬롯)

 앱 코드
<table-component>
	<tr><td>슬롯내용</></>
</table-component>

 tableComponent코드
<table>
	<slot />
</table>
슬롯자리에 <tr><td>슬롯내용</></> 이 내용이 들어간다.


<table>
	<slot />
	<slot />
	<slot />
</table>
이렇게하고 id를 지정해서 하는 방법도 있고

<table>
	<slot>
		<tr><td>디폴트 슬롯</></>
	</slot>
</table>
슬롯을 지정하지 않으면 위와같이 디폴트 슬롯내용이 나오게 할 수도 있다.

더 심화내용은 슬롯 기본문서를 읽어보면 좋다.
Vue는 기본문서가 너무 잘되어 있다.


다시 처음으로 돌아가서
 앱 코드
<table-component>
	<tr><td>슬롯내용{{AppData}}</></>
</table-component>

 tableComponent코드
<table>
	<slot />
</table>
슬롯의 장점은 tableComponent에서 슬롯내용이 렌더링되지만
앱코드에  슬롯내용을 둘 수 있다는데에 있다.
그러므로 AppData라는 부모컴포넌트에 있는 데이터를 사용할 수 있다.
데이터뿐만아니라 부모컴포넌트의 메소드,컴퓨티드, 데이터 등등 전부 사용할 수 있다.

슬롯은 IOC의 역할 DI일수도 있다.
관계역전, 의존성주입


v-for를 할때 쓰는 :key를 어떻게 써야하는가
index를 쓰는게 좋을 때가 있고 안쓰는게 좋을 때가 있다.
<tr v-for="{rowData, rowIndex} in tableData" :key="rowIndex">
            <td v-for="{cellData, cellIndex} in rowData" :key="cellIndex">{{cellData}}</td>
</tr>

[0,1,2,3,4,5,...]
평범하게 증가하는 배열의 경우
[0,1,2,3,4,5] => [0,1,13,4,5]
또는 앱중간에 배열이 수정되는 경우
[0,1,2,3,4] => [0,1,2,3,4, 5, 6]
또는 앱 중간에 배열의 뒷부분이 추가되는 경우

인덱스가 바뀌지 않기 때문에 index를 key로 사용해도 된다.
뒤에 추가된(또는 수정된) 인덱스만 다시 렌더링한다.

하지만
[0,1, 2 ,3,4] => [0,1,    3,4]
데이터 중간이 삭제되는 경우
인덱스가 바뀐부분을 다시 그린다(삭제된 데이터 뒤에 인덱스인 3,4를 다시 전부 렌더링해야 한다.)

key정하는게 진짜 애매하다.
고유한 값이 없는경우도 있기 때문이다.
개발자가 잘 생각해봐야한다...

































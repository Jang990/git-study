package templatemethodpattern;

public class Main {
	/*
	 *  챕터 8
	 * 
	 *  템플릿 메소드 패턴(Template Method Pattern)
	 * 메소드에서 알고리즘의 골격을 정의합니다. 알고리즘의 여러 단계중 일부는 서브클래스에서 구현할 수 있습니다.
	 * 템플릿 메소드를 이용하면 알고리즘의 구조는 그대로 유지하면서 서브클래스에서 특정 단계를 재정의할 수 있습니다.
	 * 
	 * CaffeineBeverage 에 자세히 설명이 되어있다. 먼저 보고와라.
	 * 
	 *  디자인 원칙
	 * 8. 헐리우드 원칙 - 먼저 연락하지 마세요. 저희가 연락 드리겠습니다.
	 * 헐리우드 원칙을 사용하면 "의존성 부패"를 방지할 수 있다. 
	 *  의존성 부패란
	 * 어떤 고수준 구성요소가 저수준 구성요소에 의존하고, 
	 * 그 고수준 구성요소는 다시 또다른 구성요소에 의존하고
	 * 그 다른 구성요소는 또 저수준 구성요소에 의존하는 것과 같은 식으로
	 * 의존성이 복잡하게 꼬여있는 것을 말한다.
	 * 
	 * 		고수준 구성요소(CaffeineBeberage)
	 * 	    /		\
	 * 저수준 구성요소  저수준 구성요소 (Tea, Coffie)
	 * 
	 * 헐리우드 원칙을 사용하면
	 * 저수준 구성요소애소 시스템에 접속을 할 수는 있지만
	 * 언제 어떤 식으로 그 구성요소들을 사용할지는 고수준 구성요소에서 결정하기 된다.
	 * 예를 들어 Tea와 Coffie에서 구현한 추상메소드들은 CaffeineBeberage에서 호출 "당하기"전까지 절대 추상 클래스를 직접 호출하지 않는다.
	 * 
	 *  저수준 구성요소에서는 고수준 구성요소에 있는 메소드를 호출할 수 없는 건가요?
	 * 그런건 아니다. 저수준 구성요소에서 계층구조상 위에 있는 클래스에서 정의한 메소드를 상속을 통해
	 * 호출하는 경우는 빈번하게 있다. 하지만 저수준 구성요소와 고수준 구성요소 사이에 확연하게 드러나는 순환 의존성이 생기는 것은 피하는 것이 좋다. 
	 * 
	 * 338p 자바 API에서의 템플릿 메소드 패턴 - 이해하기 좋다.
	 * 
	 */
	
	public static void main(String[] args) {
		
	}

}
